# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build with CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      run: cmake -B ${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Setup artifact directory
      run:
        mkdir -p ${{github.workspace}}/artifact
        cp ${{github.workspace}}/vendor/fmod/api/core/lib/x86_64/libfmod.* ${{github.workspace}}/artifact
        cp ${{github.workspace}}/vendor/fmod/api/studio/lib/x86_64/libfmodstudio.* ${{github.workspace}}/artifact
        cp ${{github.workspace}}/build/game ${{github.workspace}}/artifact

    - name: Upload Artifact
      # Upload the build directory as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-linux
        path: ${{github.workspace}}/artifact
  
  # This has to be separated from the linux build because windows needs to use MSYS2
  build_windows:
      runs-on: windows-latest

      steps:
      - uses: actions/checkout@v4

      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          install: >-
            base-devel
            git
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-zlib

            - name: Configure CMake
            # Configure CMake in a 'build' subdirectory.
            run: cmake -B ${{github.workspace}}/build
      
      - name: Build
        shell: msys2 {0}
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build
  
      - name: Setup artifact directory
        shell: msys2 {0}
        run:
          mkdir -p ${{github.workspace}}/artifact
          cp ${{github.workspace}}/vendor/fmod/api/core/lib/x64/fmod.dll ${{github.workspace}}/artifact
          cp ${{github.workspace}}/vendor/fmod/api/studio/lib/x64/fmodstudio.dll ${{github.workspace}}/artifact
          cp ${{github.workspace}}/build/game ${{github.workspace}}/artifact
  
      - name: Upload Artifact
        # Upload the build directory as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-windows
          path: ${{github.workspace}}/artifact

